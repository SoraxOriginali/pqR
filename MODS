This file records modifications in pqR that are of little interest to
users, such as cleanups of source code.

   o Cleaned up inconsistencies in checks for arity of primitives in eval.c
     Removed checks from functions implementing language features "repeat",
     "while", and "function", consistent with other language features (lack
     of checks does not cause a crash --- missing arguments just appear
     to be NULL).  Changed the check in do_set to the standard form
     using checkArity, with names.c changed to make the arity be 2 rather
     than -1.

   o The "spare" bit in sxpinfo is renamed to "misc", and the documentation 
     in the code and in R-ints.texi is changed to reflect this, and to 
     document that this bit is actually used.

   o The documentation before do_seq in seq.c is changed to be correct
     (seq.int is no longer SPECIAL), and the incorrect reference to
     seq.int in R-ints.texi is removed.

   o The fixup_NaRm function defined in summary.c is moved to match.c,
     where it belongs.  It is now properly declared in Rinternals.h,
     rather than the definition in summary.c being surreptitiously
     referenced as an extern from logic.c.

  5)

  6)

  7)

  8)

  9)

 10)

 11)

 12)

 13) A facility has been introduced for an expression to be evaluated
     in a context in which a "variant result" is allowed - eg, if the
     result will be ignored anyway (expression is evaluated only for
     side effects), a null result might be allowed.  This is done by
     introducing an "evalv" function that is like "eval" but with an
     extra parameter saying what variant results are permissible.
     This facility is used for some modifications noted elsewhere.

 14) Calling of primitive functions has been speeded up by copying
     relevant information (eg, arity) from the table defining
     primitives (in names.c) to fields in the SEXP for the primitive.
     This saves table access computations and also division and
     remainder operations to get at the information in the "eval"
     field in names.c, which is encoded as decimal digits.  

     A procedure SET_PRIMFUN in memory.c was surreptitiously changing
     the function pointer for a primitive via the function pointer
     access macro, PRIMFUN.  I have introduced a SET_PRIMFUN macro to
     do this properly.

     Code in saveload.c (for loading old workspaces?) creates a
     primitive directly, bypassing the mkPRIMSXP procedure.  This
     seems unwise, since creation via mkPRIMSXP is apparently needed
     to ensure protection of primitives.  Whatever is going on there
     should not be affected by this modification, however.

 15)

 16)

 17)

 18)

 19)

 20)

 21)

 22)

 23)

 24)

 25)

   o Rinternals.h now has a #define for R_OMP_FIRSTPRIVATE_VARS, which 
     contains a comma-separated list of variables that should usually
     be included in the firstprivate part of an OMP parallel construction,
     since they are used in macros such as NA_REAL.

 27)

 28)

 29)

 30)

 31)

 32)

 33)

   o Code in R-2.15.0 exists for maintaining a cache of primitive objects,
     but this code forgets to ever actually enter a primitve into the cache.
     This is now done (in mkPRIMSXP).

 35)

 36)

 37)

   o The "inspect" .Internal function was changed to show some details of
     pairlist nodes, if SHOW_PAIRLIST_NODES is defined as 1 in inspect.c.
     Also, it no longer produces output with tabs (spaces instead).

 39)

 40)

 41)

 42)

 43)

 44)

 45)

 46)

 47)

 48)

 49)

 50)

 51)

 52)

 53)

 54)

 55)

 56)

 57)

 58)

 59)

 60)

 61)

 62)

 63)

 64)

 65)

 66)

 67)

 68)

 69)

 70)

 71)

 72)

 73)

 74)

 75)

 76)

 77)

 78)

 79)

 80)

 81)

 82)

 83)

 84)

 85)

 86)

 87)

 88)

 89)

 90)

 91)

 92)

 93)

 94)

 95)

 96)

 97)

 98)

 99)
